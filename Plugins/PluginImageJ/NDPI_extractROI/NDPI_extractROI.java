/**
 * author: Perrine.paul-gilloteaux@univ-nantes.fr*
 * Ths plugin NDPI extract ROI will extract an imageJ roi or the full image at the desired resolution from an hammatsu NDPI file.
 * 26/11/2015 to make it fully macro recordable
 * 29/01/2016: add a batch processing option after setting have been selected
 * TODO: add roi as a parameter
 * TODO: add several ROI management, read from the ROI manager
 * TODO: add automatic import of ROI from ndpas xml files generated by Hammamatsu viewer.
 */


import ij.*;
import ij.gui.DialogListener;
import ij.gui.GenericDialog;
import ij.gui.NonBlockingGenericDialog;
import ij.gui.Roi;
import ij.io.OpenDialog;

import java.awt.AWTEvent;
import java.awt.Component;
import java.awt.Rectangle;

import java.io.BufferedReader;
import java.io.File;

import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Paths;

import ij.plugin.*;

//import org.openslide.*;
//public class NDPI_extractROI implements PlugIn {
public class NDPI_extractROI implements PlugIn,DialogListener {
	String executableName;
	String cmdline;
	int nblevels;
	private int sizey0;
	private int sizex0;
	private double pixelsize;
	private String imagetitle;
	private String osName;
	private String fileName;
	private String directory;
	private ImagePlus preview;
	private double maxobj;
	private String[]  items;
	private NonBlockingGenericDialog gd;
	private int selectedLevel;
	private Roi activeRoi;
	
	
	
	
	public void run(String arg) {
	
		
		OpenDialog od = new OpenDialog("Load NDPI File...", arg);
		fileName = od.getFileName();
		if (fileName==null)
		  return;
		directory = od.getDirectory();
	
		String[] argsinfo = new String[] {directory+fileName};
	    
	   osName = System.getProperty("os.name" );
		
		if( osName.startsWith( "Windows" ) ){
			executableName = "openslide-show-properties.exe" ;
			cmdline = "plugins"+File.separator+"bin"+File.separator+executableName;
		}
            
        else{
            executableName = "openslide-show-properties" ;
            cmdline = executableName;
        }

        
        for (int i = 0 ; i < argsinfo.length ; i++)
        {
           
            if (argsinfo[i].indexOf(" ") >= 0)
                cmdline += " \"" + argsinfo[i] + "\"";
            else
                cmdline += " " + argsinfo[i];
            
        }
        imagetitle=fileName.split(".ndpi")[0];
        long start = System.currentTimeMillis();
        IJ.log("Running " + cmdline);
        IJ.log("getting info from "+ imagetitle);
        Runtime rt = Runtime.getRuntime();
        try {
			Process p= rt.exec(cmdline);
			BufferedReader output = new BufferedReader(new InputStreamReader(p.getInputStream()));
            BufferedReader error = new BufferedReader(new InputStreamReader(p.getErrorStream()));
			
			String ligne = "";

            while ((ligne = output.readLine()) != null) {
                if (ligne.startsWith("openslide.level-count")){
                	int i1=ligne.indexOf("'")+1;
                	int i2=ligne.lastIndexOf("'");
                	nblevels=Integer.parseInt(ligne.substring(i1, i2));
                	
                	IJ.log("# levels: "+ nblevels);
 
                	
                }
                if (ligne.startsWith("openslide.level[0].height")){
                	int i1=ligne.indexOf("'")+1;
                	int i2=ligne.lastIndexOf("'");
                	sizey0=Integer.parseInt(ligne.substring(i1, i2));
                	
                	IJ.log("size y: "+ sizey0);
                }
                if (ligne.startsWith("openslide.level[0].width")){
                	int i1=ligne.indexOf("'")+1;
                	int i2=ligne.lastIndexOf("'");
                	sizex0=Integer.parseInt(ligne.substring(i1, i2));
                	
                	IJ.log("size x: "+ sizex0);
                }
                if (ligne.startsWith("openslide.mpp-x")){
                	int i1=ligne.indexOf("'")+1;
                	int i2=ligne.lastIndexOf("'");
                	pixelsize=Double.parseDouble(ligne.substring(i1, i2));
                	
                	IJ.log("pixelsize in um in level 0: "+ pixelsize);
                }
                if (ligne.startsWith("openslide.objective-power")){
                	int i1=ligne.indexOf("'")+1;
                	int i2=ligne.lastIndexOf("'");
                	maxobj=Double.parseDouble(ligne.substring(i1, i2));
                	
                	IJ.log("objective used in level 0: "+ maxobj+"x");
                }
            }
           
            while ((ligne = error.readLine()) != null) {
                IJ.log(ligne);
            }
            p.waitFor();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			IJ.log(e.toString());
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			IJ.log(e.toString());
		}
        int sizexlastlevel=(int) (sizex0/Math.pow(2, nblevels-1));
		int sizeylastlevel=(int) (sizey0/Math.pow(2, nblevels-1));
		items=new String[nblevels];
		for (int l=0;l<nblevels;l++){
			items[l]=IJ.d2s(maxobj/(Math.pow(2, l)),2)+"x";
			
		}
		preview=showImage(0,0,nblevels-1,sizexlastlevel,sizeylastlevel,true);
		 long stop=System.currentTimeMillis();
		IJ.log("Done in "+IJ.d2s(stop-start,0)+ "ms");
        ExtractTiff();
     
		
		
	}
	private void ExtractTiff() {
		
		
	    gd=new NonBlockingGenericDialog("MicroPicell: Extracting image from ROI");
		gd.addMessage("The full resolution image "+imagetitle+" \n will have a size of "+sizex0+" X "+sizey0+" pixels ("+IJ.d2s(sizex0*pixelsize/1000)+" X "+IJ.d2s(sizey0*pixelsize/1000)+" mm)");
		gd.addMessage("You can extract a rectangular ROI from the preview at the desired resolution, \n or from a ndpa file(generated by Hammatsu when you draw ROI (not supported yet). ");
		gd.addRadioButtonGroup("Level",items,nblevels,1, items[0]);
		
		
		gd.addCheckbox("CheckSize Refresh", false);
		gd.addCheckbox("Batch Process a full set of ndpi with this resolution", false);
		gd.addCheckbox("creating multiple blocks of size max 2000", false);
		gd.addDialogListener(this);
		
		gd.showDialog();
		boolean tmp = gd.getNextBoolean();
		boolean batchprocess= gd.getNextBoolean();
		boolean batchprocessblocks= gd.getNextBoolean();
		if (gd.wasCanceled()) return;
		
		
	
	   		IJ.log("OK");
	   		if (batchprocess)
	   		{
	   			IJ.log("Batch Process, no ROI selected");
	   			try {
					Files.walk(Paths.get(directory)).forEach(filePath -> {
					    if (Files.isRegularFile(filePath)) {
					        String toprocess=filePath.toString();
					        fileName=filePath.getFileName().toString();
					        if (toprocess.endsWith(".ndpi")){
					        	IJ.log("Processing "+ toprocess+" ...");
					        	int sizeX=(int) (sizex0/Math.pow(2, selectedLevel));
				   				int sizeY=(int) (sizey0/Math.pow(2, selectedLevel));
				   				if (batchprocessblocks)
				   					WriteImageBlocks( selectedLevel, sizeX, sizeY);
				   				else
				   					showImage(0, 0, selectedLevel, sizeX, sizeY,false);
				   					
					        }
					    }
					});
				} catch (IOException e) {
					// TODO Auto-generated catch block
					IJ.log(e.getMessage());
				}
	   		}
	   		else{
	   			if (activeRoi==null){
	   				int sizeX=(int) (sizex0/Math.pow(2, selectedLevel));
	   				int sizeY=(int) (sizey0/Math.pow(2, selectedLevel));
	   				showImage(0, 0, selectedLevel, sizeX, sizeY,true);

	   			}
	   			else{
	   				Rectangle rectroi=activeRoi.getBounds();
	   				int sizeX=(int) (rectroi.width*(sizex0/Math.pow(2, selectedLevel))/preview.getWidth());
	   				int sizeY=(int) (rectroi.height*(sizey0/Math.pow(2, selectedLevel))/preview.getHeight());
	   				int x=(int)(rectroi.x*(sizex0/Math.pow(2, 0))/preview.getWidth());
	   				int y=(int)(rectroi.y*(sizey0/Math.pow(2, 0))/preview.getHeight());
	   				showImage(x,y, selectedLevel, sizeX, sizeY,true);
	   			}
	   		}
    		
		
	 
		
	}
	private void WriteImageBlocks( int lev, int sizexlastlevel, int sizeylastlevel) {
		if( osName.startsWith( "Windows" ) ){
            executableName = "openslide-write-png.exe" ;
            cmdline = "plugins"+File.separator+"bin"+File.separator+executableName;
		}
        else{
            executableName = "openslide-write-png" ;
            cmdline = executableName;
        }
		for (int bi=0;bi<sizexlastlevel-2000;bi=bi+2000)
			for (int bj=0;bj<sizeylastlevel-2000;bj=bj+2000)
			{
				int tbi=(int) (bi*Math.pow(2, selectedLevel));
				int tbj= (int) (bj* Math.pow(2, selectedLevel));
				String savepath=directory+fileName+"_x_"+bi+"_y_"+bj+".png";
				String[] argsinfo = new String[] {directory+fileName,IJ.d2s(tbi),IJ.d2s(tbj),IJ.d2s(lev),IJ.d2s(2000),IJ.d2s(2000),savepath};
				String cmdline2=cmdline;
				for (int i = 0 ; i < argsinfo.length ; i++)
					{
           
					if (argsinfo[i].indexOf(" ") >= 0)
						 cmdline2 += " \"" + argsinfo[i] + "\"";
					else
							cmdline2 += " " + argsinfo[i];
            
					}
				long start = System.currentTimeMillis();
        
				IJ.log("generating image at level "+ lev);
				Runtime rt = Runtime.getRuntime();
				try {
					Process p= rt.exec(cmdline2);

					p.waitFor();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					IJ.log(e.toString());
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					IJ.log(e.toString());
				}
				long stop = System.currentTimeMillis();
		        
				IJ.log("Done in "+IJ.d2s(stop-start,0)+ "ms for _x_"+bi+"_y_"+bj);
			}
        	
        
				
        return ;
		
	}
	private ImagePlus showImage(int posx, int posy, int lev, int sizexlastlevel, int sizeylastlevel, boolean show) {
		if( osName.startsWith( "Windows" ) ){
			 executableName = "openslide-write-png.exe" ;
			 cmdline = "plugins"+File.separator+"bin"+File.separator+executableName;
		}
           
        else{
            executableName = "openslide-write-png" ;
            cmdline = executableName;
        }
		String savepath=directory+fileName+"_preview.png";
		String[] argsinfo = new String[] {directory+fileName,IJ.d2s(posx),IJ.d2s(posy),IJ.d2s(lev),IJ.d2s(sizexlastlevel-1),IJ.d2s(sizeylastlevel-1),savepath};
        String cmdline2=cmdline;
        for (int i = 0 ; i < argsinfo.length ; i++)
        {
           
            if (argsinfo[i].indexOf(" ") >= 0)
                cmdline2 += " \"" + argsinfo[i] + "\"";
            else
                cmdline2 += " " + argsinfo[i];
            
        }
        long start = System.currentTimeMillis();
        
        IJ.log("generating image at level "+ lev);
        Runtime rt = Runtime.getRuntime();
        try {
			Process p= rt.exec(cmdline2);

            p.waitFor();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			IJ.log(e.toString());
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			IJ.log(e.toString());
		}
        ImagePlus imagetoshow=new ImagePlus();	
        if (show)
        {
        imagetoshow=IJ.openImage(savepath);
        imagetoshow.setTitle("Objective "+items[lev]);
        imagetoshow.show();
        }
       
        	
        
        long stop = System.currentTimeMillis();
        
        IJ.log("Done in "+IJ.d2s(stop-start,0)+ "ms");
        return imagetoshow;
	}
	/*@Override
	public boolean dialogItemChanged(GenericDialog arg0, AWTEvent arg1) {
		// TODO Auto-generated method stub
		getNextRadioButton();
		return false;
	}*/
	@Override
	public boolean dialogItemChanged(GenericDialog gd, AWTEvent e) {
		// TODO Auto-generated method stub
		 selectedLevel=0;
		String selectedobj = gd.getNextRadioButton();
		for (int l=0;l<nblevels;l++){
			if (items[l].equalsIgnoreCase(selectedobj)){
				selectedLevel=l;
				break;
			}}
    	activeRoi=preview.getRoi();
    	if (activeRoi==null){
    		int sizeX=(int) (sizex0/Math.pow(2, selectedLevel));
    		int sizeY=(int) (sizey0/Math.pow(2, selectedLevel));
    		IJ.log("Generated Image Size: "+ sizeX+" X " +sizeY + " pixels");
    		
    	}
    	else{
		Rectangle rectroi=activeRoi.getBounds();
		int sizeX=(int) (rectroi.width*(sizex0/Math.pow(2, selectedLevel))/preview.getWidth());
		int sizeY=(int) (rectroi.height*(sizey0/Math.pow(2, selectedLevel))/preview.getHeight());
		IJ.log("Generated Image Size: "+sizeX+" X " +sizeY + " pixels");
		
    	}
    	
    	
    	
	return true;
	}

	

}