// ************************************************************************ //
// WARNING
// -------
// This file is generated by the Type Library importer or Type Libary Editor.
// Barring syntax errors, the Editor will parse modifications made to the file.
// However, when applying changes via the Editor this file will be regenerated
// and comments or formatting changes will be lost.
// ************************************************************************ //
// File generated on 27.05.2019 13:58:58 (- $Rev: 12980 $, 1037486006).

[
  uuid(A73FB5E7-1F24-49FA-B05D-F1B06B773E65),
  version(1.0),
  helpstring("MMI CellTools remote COM interface")

]
library CTRemote
{

  importlib("stdole2.tlb");

  interface ICTRemoteCoClass;
  dispinterface ICTRemoteCoClassEvents;
  coclass CTRemoteCoClass;


  [
    uuid(BCA10D18-11E0-4C71-AFB4-3A7C7918C20D)
  ]
  enum CTError
  {
    GroupTagOutOfRange = -555000,
    SlideNotAvailable = -554999,
    MicroscopeBusy = -554998,
    NoShapeProcessorAvailable = -554997,
    StageOriginNotDefined = -554996
  };

  [
    uuid(62EB050C-64E2-480C-BBB6-3554FCAB2FDE),
    helpstring("Dispatch interface for CTRemoteCoClass Object"),
    dual,
    oleautomation
  ]
  interface ICTRemoteCoClass: IDispatch
  {
    [id(0x000000C9), helpstring("Moves the stage to xy position and microscope focus to z position. If Celltools is Busy the function will display a warning message and will not be executed.")]
    HRESULT _stdcall CTMoveTo([in] double* x, [in] double* y, [in] double* z);
    [id(0x000000CA), helpstring("Stop all running processes in CellTools (identical to ESC press in CellTools)")]
    HRESULT _stdcall CTStop(void);
    [propget, id(0x000000CB), helpstring("Indicates if CellTools is ready to receive movement commands. If CellTools is Busy most GUI interface features of the CellTools are disabled "), uidefault]
    HRESULT _stdcall CTBusy([out, retval] short* Value);
    [propput, id(0x000000CB), helpstring("Set the Busy flag of CellTools. The GUI features of the CellTools are disabled, exept the ESC Key and ESC menu item. If you set Busy = false CTStop() will be called first."), uidefault]
    HRESULT _stdcall CTBusy([in] short Value);
    [propget, id(0x000000CD), helpstring("Returns the current stage x position in micrometer. Zero is the left edge of the stage insert (slide holder). Moving to x will move the x position into the center of the field of view, independend what objective is selected. (Requires paraxial lens offset calibration and stage calibration in CellTools)")]
    HRESULT _stdcall CTCurrentX([out, retval] double* Value);
    [propget, id(0x000000CE), helpstring("Returns the current stage y position in micrometer. Zero is the bacl edge of the stage insert (slide holder). Moving to y will move the y position into the center of the field of view, independend what objective is selected.(Requires paraxial lens offset calibration and stage calibration in CellTools)")]
    HRESULT _stdcall CTCurrentY([out, retval] double* Value);
    [propget, id(0x000000CF), helpstring("Returns the current microscope z position in micrometer. Moving to z will move the z position into focus, independend what objective is selected. (requires paraxial lens offset calibration in CellTools)")]
    HRESULT _stdcall CTCurrentZ([out, retval] double* Value);
    [propget, id(0x000000D0), helpstring("Reserved for the test program. Do not use.")]
    HRESULT _stdcall Demo([out, retval] long* Value);
    [propput, id(0x000000D0), helpstring("Reserved for the test program. Do not use")]
    HRESULT _stdcall Demo([in] long Value);
    [propget, id(0x000000D1), helpstring("Return the magnification factor of the images in pixel per millimeter")]
    HRESULT _stdcall CTCurrentPixelPerMM([out, retval] double* Value);
    [propget, id(0x000000D3), helpstring("Return an image via IStream interface. From the stream the image can be loaded similar as  loading an image from a hard drive.")]
    HRESULT _stdcall CTAquireCurrentImage([out, retval]  IUnknown** Value);
    [id(0x000000CC), helpstring("Do not call from client. Reserved for the server. Sends a notification any time the CellTools Busy flag is changed. ")]
    HRESULT _stdcall NotifyBusyChanged(void);
    [id(0x000000D2), helpstring("Do not call from client. Reserved for the server. Sends a notification after any stage movement")]
    HRESULT _stdcall NotifyMoved(void);
    [id(0x000000D4), helpstring("Transfers a shape from client to server. The shape coordinates are expected in mm with (0,0) at the left upper slide corner. The group will be indentified via the CellTools group tag.")]
    HRESULT _stdcall TransferShapeToCT([in] LPWSTR SampleID, [in] long group, [in] SAFEARRAY(double) X, [in] SAFEARRAY(double) Y, [in] double Z);
    [id(0x000000D5), helpstring("returns the sample name in slide number SlideIndex+1")]
    HRESULT _stdcall SetSampleID([in] long SlideIndex, [in] LPWSTR ID);
    [id(0x000000D6), helpstring("set the sample name in slide number SlideIndex+1")]
    HRESULT _stdcall GetSampleID([in] long SlideIndex, [out, retval] LPWSTR* ID);
    [id(0x000000D7), helpstring("calibrates the zero position of the stage by moving the stage to the back and left limit switches and returns to start position")]
    HRESULT _stdcall CTCalibrateStage(void);
    [id(0x000000D8), helpstring("uses the current application to process not yet processed shapes")]
    HRESULT _stdcall CTProcessShapes(void);
    [id(0x000000D9), helpstring("Do not call from client. Reserved for the server. Sends a notification any time CellTools created an new scanned image.")]
    HRESULT _stdcall NotifyNewScannedImageAvailable([out] BSTR* SampleID, [out] BSTR* FilePathName);
    [id(0x000000DA), helpstring("Do not call from client. Reserved for the server. Sends a notification any time CellTools processed a group of shapes.")]
    HRESULT _stdcall NotifyShapesGroupProcessed([out] long* Group, [in, out] BSTR* ReportPath);
    [propget, id(0x000000DC)]
    HRESULT _stdcall CTCurrentSlideSampleID([out, retval] LPWSTR* Value);
    [id(0x000000DB)]
    HRESULT _stdcall GetScannedImageFileName([in] LPWSTR SampleID, [out, retval] BSTR* FileName);
    [id(0x000000DD)]
    HRESULT _stdcall GetScannedImageMagnification([in] LPWSTR SampleID, [out, retval] double* PixelPerMM);
  };

  [
    uuid(C932AB4F-E9E2-42D4-ACE2-97D329456B33),
    helpstring("Events interface for CTRemoteCoClass Object")
  ]
  dispinterface ICTRemoteCoClassEvents
  {
    properties:
    methods:
    [id(0x000000C9), helpstring("Catch this event to be notified after any movement of the stage ")]
    HRESULT CTMoved(void);
    [id(0x000000CA), helpstring("Catch this event to be notified any time the CellTools busy flag will be changed")]
    HRESULT CTBusyChanged(void);
    [id(0x000000CB), helpstring("Catch this event to be notified any time CellTools scanned a new image")]
    HRESULT CTNewScannedImageAvailable([in, out] BSTR* SampleID, [in, out] BSTR* FilePathName);
    [id(0x000000CC), helpstring("Catch this event to be notified any time CellTools processed a group of shapes. If no report was created the ReportPath will be emtpy.The group will be identified by the CellTools group tag.")]
    HRESULT CTShapesGroupProcessed([in, out] long* Group, [in, out] BSTR* ReportPath);
  };

  [
    uuid(0031CEA8-67FC-4EBD-AD17-645ACBD503F2),
    helpstring("CTRemoteCoClass Object")
  ]
  coclass CTRemoteCoClass
  {
    [default] interface ICTRemoteCoClass;
    [default, source] dispinterface ICTRemoteCoClassEvents;
  };

};
